name: Build and deploy Node.js and Python apps to Azure Web Apps

on:
  pull_request:
    branches:
      - main
    types: 
      - closed # Ensures the workflow triggers only when a pull request is merged
  workflow_dispatch:

jobs:
  check-pr-comments:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref == 'UAT'
    outputs:
      deploy_frontend: ${{ steps.set_output.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.set_output.outputs.deploy_backend }}
    steps:
      - name: Extract PR body content
        id: extract_content
        run: echo "PR_BODY=$(echo '${{ github.event.pull_request.body }}')" >> $GITHUB_ENV

      - name: Determine deployment type
        id: set_output
        run: |
          echo "Checking for 'frontend::' or 'backend::' in PR comments..."
          PR_BODY="${{ env.PR_BODY }}"
          
          frontend=false
          backend=false
          
          if [[ "$PR_BODY" == *"frontend::"* ]]; then
            frontend=true
          fi
          
          if [[ "$PR_BODY" == *"backend::"* ]]; then
            backend=true
          fi
          
          echo "::set-output name=deploy_frontend::$frontend"
          echo "::set-output name=deploy_backend::$backend"

  build-frontend:
    runs-on: ubuntu-latest
    needs: check-pr-comments
    if: ${{ needs.check-pr-comments.outputs.deploy_frontend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: React/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('React/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies and build frontend
        run: |
          npm install
          npm run build --if-present
        working-directory: React/frontend

      - name: Zip artifact for deployment
        run: |
          zip -r release.zip ./*
        working-directory: React/frontend/build

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: React/frontend/build/release.zip

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    if: ${{ needs.check-pr-comments.outputs.deploy_frontend == 'true' }}
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact

      - name: List files after download
        run: ls -la

      - name: Inspect the contents of release.zip before unzipping
        run: |
          echo "Listing contents of release.zip"
          unzip -l frontend-artifact.zip

      - name: Unzip artifact for deployment
        run: unzip frontend-artifact.zip -d ./unzipped

      - name: List files in unzipped directory
        run: ls -la ./unzipped

      - name: List files inside unzipped static folder
        run: ls -la ./unzipped/static/

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'myvdtreact'
          slot-name: 'Production'
          package: ./unzipped
          clean: true # Ensures the directory is cleaned before deployment

  build-backend:
    runs-on: ubuntu-latest
    needs: check-pr-comments
    if: ${{ needs.check-pr-comments.outputs.deploy_backend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('MyFlask/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        run: |
          cd MyFlask
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    if: ${{ needs.check-pr-comments.outputs.deploy_backend == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'my-backend-app'  # Replace with your backend web app name
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BACKEND }}
